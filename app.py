# ==============================================================================
# Importa√ß√µes e Configura√ß√£o Inicial
# ==============================================================================
import streamlit as st               # Biblioteca para cria√ß√£o de dashboards interativos
import pandas as pd                 # Biblioteca para manipula√ß√£o de dados em formato tabular
import numpy as np                  # Biblioteca para opera√ß√µes num√©ricas e gera√ß√£o de dados
import plotly.express as px         # Biblioteca para visualiza√ß√µes interativas
import plotly.graph_objects as go   # Biblioteca para gr√°ficos avan√ßados
from plotly.subplots import make_subplots  # Ferramenta para criar subgr√°ficos
import datetime                     # Biblioteca para manipula√ß√£o de datas
import random                       # Biblioteca para gera√ß√£o de n√∫meros aleat√≥rios
from dateutil.relativedelta import relativedelta  # Ferramenta para c√°lculos de diferen√ßa de tempo
import statsmodels.api as sm

# Configura√ß√£o inicial da p√°gina no Streamlit
st.set_page_config(
    page_title="An√°lise de Dados Banc√°rios",
    page_icon="üí∞",
    layout="wide"
)

# T√≠tulo principal do dashboard
st.title("üìä Dashboard de An√°lise de Dados Banc√°rios")
st.markdown("---")  # Divis√£o visual

# ==============================================================================
# Barra Lateral
# ==============================================================================
with st.sidebar:
    st.header("Sobre o Projeto üåû")
    st.markdown("""
    Este dashboard analisa dados banc√°rios para melhorar a qualidade do atendimento e aumentar o lucro da institui√ß√£o em 6 etapas:

    - üóÇÔ∏è **Coleta de dados**
    - üßπ **Limpeza de dados**
    - üìä **Explora√ß√£o de dados (EDA)**
    - üîç **An√°lise e interpreta√ß√£o**
    - üìà **Visualiza√ß√£o e relat√≥rios**
    - ‚úÖ **Tomada de decis√£o**
    """)

    st.header("Tecnologias Utilizadas üõ†Ô∏è")
    st.markdown("""
    - üêç **Python**
    - üêº **Pandas**
    - üî¢ **NumPy**
    - üìâ **Plotly**
    - üåê **Streamlit**
    - üìà **statsmodels**            
    """)

# ==============================================================================
# Fun√ß√µes Auxiliares
# ==============================================================================

@st.cache_data
def gerar_dados(n_linhas=10000):
    """
    Gera um conjunto de dados simulados com informa√ß√µes de clientes banc√°rios.

    Par√¢metros:
    - n_linhas (int): N√∫mero de registros a serem gerados (padr√£o: 10.000).

    Retorna:
    - pd.DataFrame: DataFrame contendo os dados simulados.
    """
    # Definir seed para reprodutibilidade
    np.random.seed(42)
    random.seed(42)
    
    # Data atual para refer√™ncia
    data_atual = datetime.datetime.now()
    
    # Criar IDs de clientes
    ids_clientes = np.arange(1, n_linhas + 1)
    
    # Gerar idades entre 18 e 85 anos com distribui√ß√£o normal
    idades = np.random.normal(42, 15, n_linhas).astype(int)
    idades = np.clip(idades, 18, 85)
    
    # Gerar saldos banc√°rios com distribui√ß√£o exponencial
    saldos = np.random.exponential(10000, n_linhas)
    saldos = np.clip(saldos, 0, 500000)
    
    # Criar segmentos de clientes com probabilidades definidas
    segmentos = np.random.choice(['Varejo', 'Premium', 'Alta Renda', 'Private'], 
                                 p=[0.65, 0.20, 0.10, 0.05], size=n_linhas)
    
    # Gerar tempo de relacionamento com o banco (em meses)
    tempo_cliente = np.random.lognormal(3.5, 1, n_linhas).astype(int)
    tempo_cliente = np.clip(tempo_cliente, 1, 480)  # M√°ximo de 40 anos
    
    # Gerar n√∫mero de produtos (1 a 8)
    num_produtos = np.random.negative_binomial(3, 0.4, n_linhas) + 1
    num_produtos = np.clip(num_produtos, 1, 8)
    
    # Gerar canais de atendimento preferidos
    canais = np.random.choice(['App', 'Internet Banking', 'Ag√™ncia', 'Central Telef√¥nica', 'Caixa Eletr√¥nico'],
                              p=[0.45, 0.25, 0.15, 0.10, 0.05], size=n_linhas)
    
    # Gerar scores de satisfa√ß√£o (0-100)
    satisfacao = np.random.beta(7, 3, n_linhas) * 100
    
    # Definir se cliente est√° ativo ou inativo
    ativo = np.random.choice([True, False], p=[0.85, 0.15], size=n_linhas)
    
    # Valores de transa√ß√µes mensais
    valor_transacoes = np.random.exponential(2000, n_linhas)
    valor_transacoes = np.clip(valor_transacoes, 0, 50000)
    
    # Frequ√™ncia de contatos com o banco por m√™s
    freq_contatos = np.random.poisson(3, n_linhas)
    freq_contatos = np.clip(freq_contatos, 0, 30)
    
    # Criar DataFrame inicial
    df = pd.DataFrame({
        'id_cliente': ids_clientes,
        'idade': idades,
        'saldo_conta': saldos.round(2),
        'segmento': segmentos,
        'tempo_cliente_meses': tempo_cliente,
        'num_produtos': num_produtos,
        'canal_preferido': canais,
        'satisfacao': satisfacao.round(1),
        'cliente_ativo': ativo,
        'valor_transacoes_mensais': valor_transacoes.round(2),
        'freq_contatos_mensais': freq_contatos
    })
    
    # Adicionar correla√ß√µes artificiais para maior realismo
    # 1. Clientes Premium, Alta Renda e Private t√™m saldos maiores
    for i, seg in enumerate(['Varejo', 'Premium', 'Alta Renda', 'Private']):
        mask = df['segmento'] == seg
        df.loc[mask, 'saldo_conta'] = df.loc[mask, 'saldo_conta'] * (i + 1) * 1.5
    
    # 2. Satisfa√ß√£o maior em segmentos superiores
    for i, seg in enumerate(['Varejo', 'Premium', 'Alta Renda', 'Private']):
        mask = df['segmento'] == seg
        df.loc[mask, 'satisfacao'] = df.loc[mask, 'satisfacao'] * (1 + i * 0.05)
        df.loc[mask, 'satisfacao'] = np.clip(df.loc[mask, 'satisfacao'], 0, 100)
    
    # 3. Valor de transa√ß√µes maior para clientes com mais produtos
    for prod in range(1, 9):
        mask = df['num_produtos'] == prod
        df.loc[mask, 'valor_transacoes_mensais'] = df.loc[mask, 'valor_transacoes_mensais'] * (1 + prod * 0.15)
    
    # 4. Clientes mais velhos preferem canais tradicionais
    for i, canal in enumerate(['App', 'Internet Banking', 'Caixa Eletr√¥nico', 'Central Telef√¥nica', 'Ag√™ncia']):
        mask = df['canal_preferido'] == canal
        idade_ajuste = np.random.normal(30 + i * 8, 5, sum(mask))
        df.loc[mask, 'idade'] = np.clip(idade_ajuste, 18, 85).astype(int)
    
    # 5. Clientes mais antigos t√™m mais produtos
    df['num_produtos'] = df['num_produtos'] + (df['tempo_cliente_meses'] / 120).astype(int)
    df['num_produtos'] = np.clip(df['num_produtos'], 1, 8)
    
    # 6. Calcular receita por cliente
    base_receita = np.random.lognormal(3, 1, n_linhas) * 10
    for i, seg in enumerate(['Varejo', 'Premium', 'Alta Renda', 'Private']):
        mask = df['segmento'] == seg
        base_receita[mask] = base_receita[mask] * (1 + i * 0.5)
    base_receita = base_receita * (1 + df['num_produtos'] * 0.2)
    base_receita = base_receita + (df['valor_transacoes_mensais'] * 0.01)
    base_receita[df['cliente_ativo']] = base_receita[df['cliente_ativo']] * 1.5
    df['receita_mensal'] = base_receita.round(2)
    
    # 7. Calcular custo de atendimento por canal
    custos_base = {
        'App': 0.5,
        'Internet Banking': 1.0,
        'Caixa Eletr√¥nico': 3.0,
        'Central Telef√¥nica': 7.0,
        'Ag√™ncia': 15.0
    }
    custo_atendimento = np.zeros(n_linhas)
    for canal, custo in custos_base.items():
        mask = df['canal_preferido'] == canal
        custo_atendimento[mask] = custo
    df['custo_atendimento_mensal'] = (custo_atendimento * df['freq_contatos_mensais']).round(2)
    
    # 8. Calcular rentabilidade mensal (receita - custo)
    df['rentabilidade_mensal'] = (df['receita_mensal'] - df['custo_atendimento_mensal']).round(2)
    
    return df

def mostrar_estatisticas(df):
    """
    Exibe m√©tricas principais dos dados banc√°rios em formato de cart√µes de indicadores.

    Par√¢metros:
    - df (pd.DataFrame): DataFrame com os dados banc√°rios.
    """
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("Total de Clientes", f"{len(df):,}")
    with col2:
        ativos = df['cliente_ativo'].sum()
        st.metric("Clientes Ativos", f"{ativos:,} ({ativos/len(df):.1%})")
    with col3:
        st.metric("Saldo M√©dio", f"R$ {df['saldo_conta'].mean():,.2f}")
    with col4:
        st.metric("Satisfa√ß√£o M√©dia", f"{df['satisfacao'].mean():.1f}/100")

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("Receita Mensal Total", f"R$ {df['receita_mensal'].sum():,.2f}")
    with col2:
        st.metric("Custo Mensal Total", f"R$ {df['custo_atendimento_mensal'].sum():,.2f}")
    with col3:
        rentabilidade = df['rentabilidade_mensal'].sum()
        st.metric("Rentabilidade Mensal", f"R$ {rentabilidade:,.2f}")
    with col4:
        st.metric("Rentabilidade M√©dia/Cliente", f"R$ {df['rentabilidade_mensal'].mean():,.2f}")

# Gerar dados simulados
df = gerar_dados(10000)

# ==============================================================================
# Se√ß√£o 1: Coleta de Dados
# ==============================================================================
st.header("1. Coleta de Dados")
st.markdown("""
Para este projeto, simulamos dados banc√°rios de 10.000 clientes com informa√ß√µes sobre perfil, comportamento financeiro, 
padr√µes de uso de servi√ßos e m√©tricas de satisfa√ß√£o. Em um cen√°rio real, esses dados seriam coletados de:

- Sistemas de core banking
- Registros de transa√ß√µes
- Pesquisas de satisfa√ß√£o
- Logs de intera√ß√µes com canais digitais
- Registros de atendimento
""")
with st.expander("Ver amostra dos dados coletados"):
    st.dataframe(df.head(10))
    st.download_button(
        label="Baixar dados completos",
        data=df.to_csv(index=False).encode('utf-8'),
        file_name="dados_bancarios.csv",
        mime="text/csv"
    )
st.markdown("---")

# ==============================================================================
# Se√ß√£o 2: Limpeza de Dados
# ==============================================================================
st.header("2. Limpeza de Dados")
st.markdown("""
Em dados reais, seria necess√°rio realizar v√°rias etapas de limpeza como:
- Tratamento de valores ausentes
- Remo√ß√£o de duplicatas
- Corre√ß√£o de inconsist√™ncias
- Padroniza√ß√£o de formatos

Para nossos dados simulados, realizaremos algumas verifica√ß√µes b√°sicas para demonstrar o processo.
""")
with st.expander("Ver estat√≠sticas e limpeza dos dados"):
    st.subheader("Estat√≠sticas Descritivas")
    st.dataframe(df.describe().T)

    st.subheader("Verifica√ß√£o de Valores Ausentes")
    valores_ausentes = df.isnull().sum()
    if valores_ausentes.sum() > 0:
        st.dataframe(valores_ausentes[valores_ausentes > 0])
    else:
        st.write("N√£o h√° valores ausentes nos dados.")

    st.subheader("Tratamento de Outliers e Valores Imposs√≠veis")
    st.write("Verificando idades fora do intervalo esperado (18-85 anos):")
    st.write(f"Registros afetados: {sum((df['idade'] < 18) | (df['idade'] > 85))}")
    st.write("Verificando saldos negativos:")
    st.write(f"Registros afetados: {sum(df['saldo_conta'] < 0)}")

    st.subheader("Distribui√ß√£o de Segmentos")
    st.dataframe(df['segmento'].value_counts().reset_index().rename(columns={'index': 'Segmento', 'segmento': 'Quantidade'}))

    st.subheader("Distribui√ß√£o de Canais de Atendimento")
    st.dataframe(df['canal_preferido'].value_counts().reset_index().rename(columns={'index': 'Canal', 'canal_preferido': 'Quantidade'}))
st.markdown("---")

# ==============================================================================
# Se√ß√£o 3: Explora√ß√£o de Dados (EDA)
# ==============================================================================
st.header("3. Explora√ß√£o de Dados (EDA)")
st.markdown("""
A An√°lise Explorat√≥ria de Dados nos permite entender padr√µes, correla√ß√µes e tend√™ncias importantes.
Vamos analisar diferentes aspectos dos dados banc√°rios.
""")
mostrar_estatisticas(df)

# Criar abas para diferentes an√°lises explorat√≥rias
eda_tabs = st.tabs(["Perfil dos Clientes", "Segmenta√ß√£o", "Canais de Atendimento", "Satisfa√ß√£o", "Rentabilidade"])

# Aba 1: Perfil dos Clientes
with eda_tabs[0]:
    st.subheader("Distribui√ß√£o de Idade dos Clientes")
    fig = px.histogram(df, x='idade', nbins=30, 
                       title='Distribui√ß√£o de Idade dos Clientes',
                       labels={'idade': 'Idade', 'count': 'Quantidade de Clientes'},
                       color_discrete_sequence=['#2196f3'])
    fig.update_layout(xaxis_title='Idade', yaxis_title='Quantidade de Clientes')
    st.plotly_chart(fig, use_container_width=True)

    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Tempo de Relacionamento com o Banco")
        fig = px.histogram(df, x='tempo_cliente_meses', nbins=30,
                           title='Distribui√ß√£o do Tempo de Relacionamento',
                           labels={'tempo_cliente_meses': 'Tempo (meses)', 'count': 'Quantidade de Clientes'},
                           color_discrete_sequence=['#4caf50'])
        fig.update_layout(xaxis_title='Tempo (meses)', yaxis_title='Quantidade de Clientes')
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        st.subheader("Distribui√ß√£o de Saldo em Conta")
        df_plot = df.copy()
        df_plot['saldo_log'] = np.log1p(df_plot['saldo_conta'])
        fig = px.histogram(df_plot, x='saldo_log', nbins=30,
                           title='Distribui√ß√£o de Saldo (escala logar√≠tmica)',
                           labels={'saldo_log': 'Log(Saldo + 1)', 'count': 'Quantidade de Clientes'},
                           color_discrete_sequence=['#ff9800'])
        fig.update_layout(xaxis_title='Log(Saldo + 1)', yaxis_title='Quantidade de Clientes')
        st.plotly_chart(fig, use_container_width=True)

    st.subheader("N√∫mero de Produtos por Cliente")
    produtos_count = df['num_produtos'].value_counts().sort_index().reset_index()
    produtos_count.columns = ['N√∫mero de Produtos', 'Quantidade de Clientes']
    fig = px.bar(produtos_count, x='N√∫mero de Produtos', y='Quantidade de Clientes',
                 title='Distribui√ß√£o do N√∫mero de Produtos por Cliente',
                 color_discrete_sequence=['#9c27b0'])
    st.plotly_chart(fig, use_container_width=True)

# Aba 2: Segmenta√ß√£o
with eda_tabs[1]:
    st.subheader("An√°lise por Segmento de Cliente")
    fig = px.pie(df, names='segmento', title='Distribui√ß√£o de Clientes por Segmento',
                 color_discrete_sequence=px.colors.qualitative.Safe)
    fig.update_traces(textinfo='percent+label')
    st.plotly_chart(fig, use_container_width=True)

    col1, col2 = st.columns(2)
    with col1:
        saldo_por_segmento = df.groupby('segmento')['saldo_conta'].mean().reset_index()
        fig = px.bar(saldo_por_segmento, x='segmento', y='saldo_conta',
                     title='Saldo M√©dio por Segmento',
                     labels={'segmento': 'Segmento', 'saldo_conta': 'Saldo M√©dio (R$)'},
                     color_discrete_sequence=['#1976d2'])
        fig.update_layout(xaxis_title='Segmento', yaxis_title='Saldo M√©dio (R$)')
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        rent_por_segmento = df.groupby('segmento')['rentabilidade_mensal'].mean().reset_index()
        fig = px.bar(rent_por_segmento, x='segmento', y='rentabilidade_mensal',
                     title='Rentabilidade M√©dia Mensal por Segmento',
                     labels={'segmento': 'Segmento', 'rentabilidade_mensal': 'Rentabilidade M√©dia (R$)'},
                     color_discrete_sequence=['#4caf50'])
        fig.update_layout(xaxis_title='Segmento', yaxis_title='Rentabilidade M√©dia (R$)')
        st.plotly_chart(fig, use_container_width=True)

    st.subheader("N√∫mero M√©dio de Produtos por Segmento")
    produtos_por_segmento = df.groupby('segmento')['num_produtos'].mean().reset_index()
    fig = px.bar(produtos_por_segmento, x='segmento', y='num_produtos',
                 title='N√∫mero M√©dio de Produtos por Segmento',
                 labels={'segmento': 'Segmento', 'num_produtos': 'N√∫mero M√©dio de Produtos'},
                 color_discrete_sequence=['#ff9800'])
    fig.update_layout(xaxis_title='Segmento', yaxis_title='N√∫mero M√©dio de Produtos')
    st.plotly_chart(fig, use_container_width=True)

# Aba 3: Canais de Atendimento
with eda_tabs[2]:
    st.subheader("An√°lise de Canais de Atendimento")
    canais_count = df['canal_preferido'].value_counts().reset_index()
    canais_count.columns = ['Canal', 'Quantidade']
    fig = px.bar(canais_count, x='Canal', y='Quantidade',
                 title='Distribui√ß√£o de Clientes por Canal Preferido',
                 color_discrete_sequence=['#3f51b5'])
    st.plotly_chart(fig, use_container_width=True)

    col1, col2 = st.columns(2)
    with col1:
        custo_por_canal = df.groupby('canal_preferido')['custo_atendimento_mensal'].mean().reset_index()
        fig = px.bar(custo_por_canal, x='canal_preferido', y='custo_atendimento_mensal',
                     title='Custo M√©dio de Atendimento por Canal',
                     labels={'canal_preferido': 'Canal', 'custo_atendimento_mensal': 'Custo M√©dio (R$)'},
                     color_discrete_sequence=['#e91e63'])
        fig.update_layout(xaxis_title='Canal', yaxis_title='Custo M√©dio de Atendimento (R$)')
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        freq_por_canal = df.groupby('canal_preferido')['freq_contatos_mensais'].mean().reset_index()
        fig = px.bar(freq_por_canal, x='canal_preferido', y='freq_contatos_mensais',
                     title='Frequ√™ncia M√©dia de Contatos por Canal',
                     labels={'canal_preferido': 'Canal', 'freq_contatos_mensais': 'Contatos Mensais'},
                     color_discrete_sequence=['#009688'])
        fig.update_layout(xaxis_title='Canal', yaxis_title='M√©dia de Contatos Mensais')
        st.plotly_chart(fig, use_container_width=True)

    st.subheader("Canal Preferido por Segmento")
    canal_por_segmento = pd.crosstab(df['segmento'], df['canal_preferido'], normalize='index').reset_index()
    canal_por_segmento = pd.melt(canal_por_segmento, id_vars=['segmento'], var_name='canal', value_name='percentual')
    fig = px.bar(canal_por_segmento, x='segmento', y='percentual', color='canal',
                 title='Canal Preferido por Segmento',
                 labels={'segmento': 'Segmento', 'percentual': 'Percentual', 'canal': 'Canal'},
                 color_discrete_sequence=px.colors.qualitative.Safe)
    fig.update_layout(xaxis_title='Segmento', yaxis_title='Percentual (%)', barmode='stack',
                      yaxis=dict(tickformat='.0%'))
    st.plotly_chart(fig, use_container_width=True)

# Aba 4: Satisfa√ß√£o
with eda_tabs[3]:
    st.subheader("An√°lise de Satisfa√ß√£o do Cliente")
    fig = px.histogram(df, x='satisfacao', nbins=20,
                       title='Distribui√ß√£o do Score de Satisfa√ß√£o',
                       labels={'satisfacao': 'Score de Satisfa√ß√£o', 'count': 'Quantidade de Clientes'},
                       color_discrete_sequence=['#2196f3'])
    fig.update_layout(xaxis_title='Score de Satisfa√ß√£o', yaxis_title='Quantidade de Clientes')
    st.plotly_chart(fig, use_container_width=True)

    col1, col2 = st.columns(2)
    with col1:
        satisfacao_por_segmento = df.groupby('segmento')['satisfacao'].mean().reset_index()
        fig = px.bar(satisfacao_por_segmento, x='segmento', y='satisfacao',
                     title='Satisfa√ß√£o M√©dia por Segmento',
                     labels={'segmento': 'Segmento', 'satisfacao': 'Satisfa√ß√£o M√©dia'},
                     color_discrete_sequence=['#4caf50'])
        fig.update_layout(xaxis_title='Segmento', yaxis_title='Satisfa√ß√£o M√©dia')
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        satisfacao_por_canal = df.groupby('canal_preferido')['satisfacao'].mean().reset_index()
        fig = px.bar(satisfacao_por_canal, x='canal_preferido', y='satisfacao',
                     title='Satisfa√ß√£o M√©dia por Canal',
                     labels={'canal_preferido': 'Canal', 'satisfacao': 'Satisfa√ß√£o M√©dia'},
                     color_discrete_sequence=['#ff9800'])
        fig.update_layout(xaxis_title='Canal', yaxis_title='Satisfa√ß√£o M√©dia')
        st.plotly_chart(fig, use_container_width=True)

    st.subheader("Rela√ß√£o entre N√∫mero de Produtos e Satisfa√ß√£o")
    satisfacao_por_produtos = df.groupby('num_produtos')['satisfacao'].mean().reset_index()
    fig = px.line(satisfacao_por_produtos, x='num_produtos', y='satisfacao', markers=True,
                  title='Rela√ß√£o entre N√∫mero de Produtos e Satisfa√ß√£o',
                  labels={'num_produtos': 'N√∫mero de Produtos', 'satisfacao': 'Satisfa√ß√£o M√©dia'},
                  color_discrete_sequence=['#9c27b0'])
    fig.update_layout(xaxis_title='N√∫mero de Produtos', yaxis_title='Satisfa√ß√£o M√©dia')
    st.plotly_chart(fig, use_container_width=True)

# Aba 5: Rentabilidade
with eda_tabs[4]:
    st.subheader("An√°lise de Rentabilidade")
    fig = px.histogram(df, x='rentabilidade_mensal', nbins=30,
                       title='Distribui√ß√£o da Rentabilidade Mensal por Cliente',
                       labels={'rentabilidade_mensal': 'Rentabilidade Mensal (R$)', 'count': 'Quantidade de Clientes'},
                       color_discrete_sequence=['#2196f3'])
    fig.update_layout(xaxis_title='Rentabilidade Mensal (R$)', yaxis_title='Quantidade de Clientes')
    st.plotly_chart(fig, use_container_width=True)

    col1, col2 = st.columns(2)
    with col1:
        receita_custo_segmento = df.groupby('segmento').agg({
            'receita_mensal': 'mean', 
            'custo_atendimento_mensal': 'mean'
        }).reset_index()
        receita_custo_segmento = pd.melt(
            receita_custo_segmento, 
            id_vars=['segmento'], 
            value_vars=['receita_mensal', 'custo_atendimento_mensal'],
            var_name='Tipo', 
            value_name='Valor'
        )
        fig = px.bar(receita_custo_segmento, x='segmento', y='Valor', color='Tipo', barmode='group',
                     title='Receita vs Custo M√©dio por Segmento',
                     labels={'segmento': 'Segmento', 'Valor': 'Valor M√©dio (R$)'},
                     color_discrete_sequence=['#4caf50', '#f44336'])
        fig.update_layout(xaxis_title='Segmento', yaxis_title='Valor M√©dio (R$)')
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        rent_por_canal = df.groupby('canal_preferido')['rentabilidade_mensal'].mean().reset_index()
        fig = px.bar(rent_por_canal, x='canal_preferido', y='rentabilidade_mensal',
                     title='Rentabilidade M√©dia por Canal',
                     labels={'canal_preferido': 'Canal', 'rentabilidade_mensal': 'Rentabilidade M√©dia (R$)'},
                     color_discrete_sequence=['#2196f3'])
        fig.update_layout(xaxis_title='Canal', yaxis_title='Rentabilidade M√©dia (R$)')
        st.plotly_chart(fig, use_container_width=True)

    st.subheader("Rela√ß√£o entre N√∫mero de Produtos e Rentabilidade")
    rent_por_produtos = df.groupby('num_produtos')['rentabilidade_mensal'].mean().reset_index()
    fig = px.line(rent_por_produtos, x='num_produtos', y='rentabilidade_mensal', markers=True,
                  title='Rela√ß√£o entre N√∫mero de Produtos e Rentabilidade',
                  labels={'num_produtos': 'N√∫mero de Produtos', 'rentabilidade_mensal': 'Rentabilidade M√©dia (R$)'},
                  color_discrete_sequence=['#ff9800'])
    fig.update_layout(xaxis_title='N√∫mero de Produtos', yaxis_title='Rentabilidade M√©dia (R$)')
    st.plotly_chart(fig, use_container_width=True)

    st.subheader("Rela√ß√£o entre Satisfa√ß√£o e Rentabilidade")
    df_sample = df.sample(n=1000, random_state=42)
    fig = px.scatter(df_sample, x='satisfacao', y='rentabilidade_mensal', color='segmento',
                     title='Rela√ß√£o entre Satisfa√ß√£o e Rentabilidade',
                     labels={'satisfacao': 'Score de Satisfa√ß√£o', 'rentabilidade_mensal': 'Rentabilidade Mensal (R$)', 'segmento': 'Segmento'},
                     color_discrete_sequence=px.colors.qualitative.Safe)
    fig.update_layout(xaxis_title='Score de Satisfa√ß√£o', yaxis_title='Rentabilidade Mensal (R$)')
    st.plotly_chart(fig, use_container_width=True)
st.markdown("---")

# ==============================================================================
# Se√ß√£o 4: An√°lise e Interpreta√ß√£o
# ==============================================================================
st.header("4. An√°lise e Interpreta√ß√£o")
st.markdown("""
Com base na explora√ß√£o dos dados, vamos aplicar an√°lises mais aprofundadas para extrair insights relevantes 
que possam melhorar a qualidade do atendimento e aumentar a rentabilidade do banco.
""")
analysis_tabs = st.tabs(["Segmenta√ß√£o Avan√ßada", "An√°lise de Atendimento", "Modelos Preditivos", "An√°lise de Oportunidades"])

# Aba 1: Segmenta√ß√£o Avan√ßada
with analysis_tabs[0]:
    st.subheader("Segmenta√ß√£o Avan√ßada de Clientes")
    df_valor = df.copy()
    df_valor['score_saldo'] = pd.qcut(df_valor['saldo_conta'], 5, labels=False, duplicates='drop') + 1
    df_valor['score_freq'] = pd.qcut(df_valor['freq_contatos_mensais'].clip(lower=1), 5, labels=False, duplicates='drop') + 1
    df_valor['score_valor'] = pd.qcut(df_valor['valor_transacoes_mensais'], 5, labels=False, duplicates='drop') + 1
    df_valor['score_total'] = df_valor['score_saldo'] + df_valor['score_freq'] + df_valor['score_valor']
    valor_bins = [3, 7, 11, 15]
    valor_labels = ['Baixo Valor', 'M√©dio Valor', 'Alto Valor', 'Muito Alto Valor']
    df_valor['segmento_valor'] = pd.cut(df_valor['score_total'], bins=[2] + valor_bins, labels=valor_labels)

    segmentos_valor = df_valor['segmento_valor'].value_counts().reset_index()
    segmentos_valor.columns = ['Segmento de Valor', 'Quantidade']
    fig = px.pie(segmentos_valor, names='Segmento de Valor', values='Quantidade',
                 title='Distribui√ß√£o de Clientes por Segmento de Valor',
                 color_discrete_sequence=px.colors.sequential.Viridis)
    fig.update_traces(textinfo='percent+label')
    st.plotly_chart(fig, use_container_width=True)

    cruzamento_segmentos = pd.crosstab(df_valor['segmento'], df_valor['segmento_valor'], normalize='index')
    fig = px.imshow(cruzamento_segmentos, text_auto=True, aspect="auto",
                    title='Cruzamento entre Segmentos Tradicionais e Segmentos de Valor',
                    labels=dict(x='Segmento de Valor', y='Segmento Tradicional', color='Propor√ß√£o'),
                    color_continuous_scale='Viridis')
    fig.update_layout(height=400)
    st.plotly_chart(fig, use_container_width=True)

    rent_por_segmento_valor = df_valor.groupby('segmento_valor', observed=True)[['receita_mensal', 'custo_atendimento_mensal', 'rentabilidade_mensal']].mean()
    fig = make_subplots(rows=1, cols=3, 
                        subplot_titles=("Receita M√©dia", "Custo M√©dio", "Rentabilidade M√©dia"),
                        shared_yaxes=True)
    fig.add_trace(go.Bar(x=rent_por_segmento_valor.index, y=rent_por_segmento_valor['receita_mensal'], marker_color='#4caf50', name='Receita'), row=1, col=1)
    fig.add_trace(go.Bar(x=rent_por_segmento_valor.index, y=rent_por_segmento_valor['custo_atendimento_mensal'], marker_color='#f44336', name='Custo'), row=1, col=2)
    fig.add_trace(go.Bar(x=rent_por_segmento_valor.index, y=rent_por_segmento_valor['rentabilidade_mensal'], marker_color='#2196f3', name='Rentabilidade'), row=1, col=3)
    fig.update_layout(title_text="M√©tricas Financeiras por Segmento de Valor", height=400, showlegend=False)
    st.plotly_chart(fig, use_container_width=True)

    st.markdown("""
    **Insights da Segmenta√ß√£o Avan√ßada:**
    
    1. Os clientes "Alto Valor" e "Muito Alto Valor" representam uma pequena parcela da base, mas contribuem desproporcionalmente para a rentabilidade.
    2. Existe uma distribui√ß√£o heterog√™nea de valor dentro de cada segmento tradicional, indicando oportunidades de estrat√©gias personalizadas.
    3. Alguns clientes do segmento "Varejo" apresentam comportamento de "Alto Valor" ou "Muito Alto Valor", sugerindo potencial de upgrade.
    """)

# Aba 2: An√°lise de Atendimento
with analysis_tabs[1]:
    st.subheader("An√°lise do Atendimento ao Cliente")
    df_atendimento = df.copy()
    df_atendimento['faixa_contatos'] = pd.cut(df_atendimento['freq_contatos_mensais'], 
                                              bins=[0, 2, 5, 10, 30], 
                                              labels=['0-2', '3-5', '6-10', '11+'])
    satisfacao_por_freq = df_atendimento.groupby('faixa_contatos', observed=True)['satisfacao'].mean().reset_index()
    fig = px.line(satisfacao_por_freq, x='faixa_contatos', y='satisfacao', markers=True,
                  title='Rela√ß√£o entre Frequ√™ncia de Contatos e Satisfa√ß√£o',
                  labels={'faixa_contatos': 'Frequ√™ncia de Contatos Mensais', 'satisfacao': 'Satisfa√ß√£o M√©dia'},
                  color_discrete_sequence=['#e91e63'])
    fig.update_layout(xaxis_title='Frequ√™ncia de Contatos Mensais', yaxis_title='Satisfa√ß√£o M√©dia')
    st.plotly_chart(fig, use_container_width=True)

    custo_por_ponto_satisfacao = df.groupby('canal_preferido')[['custo_atendimento_mensal', 'satisfacao']].mean()
    custo_por_ponto_satisfacao['Custo por Ponto de Satisfa√ß√£o'] = custo_por_ponto_satisfacao['custo_atendimento_mensal'] / custo_por_ponto_satisfacao['satisfacao']
    custo_por_ponto_satisfacao = custo_por_ponto_satisfacao[['Custo por Ponto de Satisfa√ß√£o']].reset_index()
    fig = px.bar(custo_por_ponto_satisfacao, x='canal_preferido', y='Custo por Ponto de Satisfa√ß√£o',
                 title='Efici√™ncia do Atendimento por Canal (Custo/Satisfa√ß√£o)',
                 color_discrete_sequence=['#9c27b0'])
    fig.update_layout(xaxis_title='Canal', yaxis_title='Custo por Ponto de Satisfa√ß√£o (R$)')
    st.plotly_chart(fig, use_container_width=True)

    df_atendimento['faixa_etaria'] = pd.cut(df_atendimento['idade'], 
                                            bins=[17, 30, 45, 60, 85], 
                                            labels=['18-30', '31-45', '46-60', '61+'])
    satisfacao_idade_canal = df_atendimento.groupby(['faixa_etaria', 'canal_preferido'], observed=True)['satisfacao'].mean().reset_index()
    fig = px.bar(satisfacao_idade_canal, x='faixa_etaria', y='satisfacao', color='canal_preferido', barmode='group',
                 title='Satisfa√ß√£o por Faixa Et√°ria e Canal',
                 labels={'faixa_etaria': 'Faixa Et√°ria', 'satisfacao': 'Satisfa√ß√£o M√©dia', 'canal_preferido': 'Canal'},
                 color_discrete_sequence=px.colors.qualitative.Safe)
    fig.update_layout(xaxis_title='Faixa Et√°ria', yaxis_title='Satisfa√ß√£o M√©dia')
    st.plotly_chart(fig, use_container_width=True)

    st.markdown("""
    **Insights sobre Atendimento:**
    
    1. A satisfa√ß√£o tende a diminuir com o aumento da frequ√™ncia de contatos, indicando poss√≠veis problemas de resolu√ß√£o de quest√µes.
    2. Canais digitais (App e Internet Banking) apresentam a melhor rela√ß√£o custo-satisfa√ß√£o.
    3. Clientes mais jovens preferem e t√™m maior satisfa√ß√£o com canais digitais, enquanto clientes mais velhos valorizam o atendimento presencial.
    4. H√° uma oportunidade de redu√ß√£o de custos e aumento de satisfa√ß√£o migrando clientes para canais digitais, especialmente nas faixas et√°rias intermedi√°rias.
    """)

# Aba 3: Modelos Preditivos
with analysis_tabs[2]:
    st.subheader("Modelos Preditivos")
    df_modelo = df.copy()
    df_modelo['score_churn'] = (
        (100 - df_modelo['satisfacao']) * 0.4 +
        df_modelo['custo_atendimento_mensal'] * 0.2 +
        (9 - df_modelo['num_produtos']) * 15 +
        (120 / (df_modelo['tempo_cliente_meses'] + 12)) * 40
    ) / 100
    min_score = df_modelo['score_churn'].min()
    max_score = df_modelo['score_churn'].max()
    df_modelo['score_churn'] = ((df_modelo['score_churn'] - min_score) / (max_score - min_score)) * 100
    df_modelo['risco_churn'] = pd.cut(df_modelo['score_churn'], 
                                      bins=[0, 25, 50, 75, 100], 
                                      labels=['Baixo', 'M√©dio-Baixo', 'M√©dio-Alto', 'Alto'])

    risco_counts = df_modelo['risco_churn'].value_counts().reset_index()
    risco_counts.columns = ['N√≠vel de Risco', 'Quantidade']
    fig = px.pie(risco_counts, names='N√≠vel de Risco', values='Quantidade',
                 title='Distribui√ß√£o de Clientes por N√≠vel de Risco de Churn',
                 color='N√≠vel de Risco',
                 color_discrete_map={'Baixo': '#4caf50', 'M√©dio-Baixo': '#8bc34a', 
                                     'M√©dio-Alto': '#ffc107', 'Alto': '#f44336'})
    fig.update_traces(textinfo='percent+label')
    st.plotly_chart(fig, use_container_width=True)

    col1, col2 = st.columns(2)
    with col1:
        segmentos_risco = pd.crosstab(df_modelo['segmento'], df_modelo['risco_churn'], normalize='columns')
        fig = px.imshow(segmentos_risco, text_auto=True, aspect="auto",
                        title='Distribui√ß√£o de Segmentos por N√≠vel de Risco',
                        color_continuous_scale='RdYlGn_r')
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        satisfacao_por_risco = df_modelo.groupby('risco_churn', observed=True)['satisfacao'].mean().reset_index()
        fig = px.bar(satisfacao_por_risco, x='risco_churn', y='satisfacao',
                     title='Satisfa√ß√£o M√©dia por N√≠vel de Risco',
                     labels={'risco_churn': 'N√≠vel de Risco', 'satisfacao': 'Satisfa√ß√£o M√©dia'},
                     color_discrete_sequence=['#2196f3'])
        fig.update_layout(xaxis_title='N√≠vel de Risco', yaxis_title='Satisfa√ß√£o M√©dia')
        st.plotly_chart(fig, use_container_width=True)

    impacto_financeiro = df_modelo.groupby('risco_churn', observed=True)[['rentabilidade_mensal']].sum().reset_index()
    impacto_financeiro.columns = ['N√≠vel de Risco', 'Rentabilidade Total (R$)']
    fig = px.bar(impacto_financeiro, x='N√≠vel de Risco', y='Rentabilidade Total (R$)',
                 title='Impacto Financeiro Potencial por N√≠vel de Risco',
                 color='N√≠vel de Risco',
                 color_discrete_map={'Baixo': '#4caf50', 'M√©dio-Baixo': '#8bc34a', 
                                     'M√©dio-Alto': '#ffc107', 'Alto': '#f44336'})
    fig.update_layout(xaxis_title='N√≠vel de Risco', yaxis_title='Rentabilidade Total (R$)')
    st.plotly_chart(fig, use_container_width=True)

    st.markdown("""
    **Insights dos Modelos Preditivos:**
    
    1. Aproximadamente 25% dos clientes apresentam alto risco de churn, representando uma potencial perda significativa de receita.
    2. Clientes com maior risco de churn est√£o concentrados principalmente no segmento Varejo, mas h√° uma propor√ß√£o significativa em segmentos de maior valor.
    3. A satisfa√ß√£o do cliente √© inversamente proporcional ao risco de churn, confirmando a import√¢ncia de melhorar a experi√™ncia do cliente.
    4. O impacto financeiro potencial do churn √© expressivo, justificando investimentos em estrat√©gias de reten√ß√£o.
    """)

# Aba 4: An√°lise de Oportunidades
with analysis_tabs[3]:
    st.subheader("An√°lise de Oportunidades")
    rentabilidade_por_produtos = df.groupby('num_produtos')[['rentabilidade_mensal', 'satisfacao']].mean().reset_index()
    fig = make_subplots(specs=[[{"secondary_y": True}]])
    fig.add_trace(go.Bar(x=rentabilidade_por_produtos['num_produtos'], y=rentabilidade_por_produtos['rentabilidade_mensal'], name='Rentabilidade', marker_color='#2196f3'), secondary_y=False)
    fig.add_trace(go.Scatter(x=rentabilidade_por_produtos['num_produtos'], y=rentabilidade_por_produtos['satisfacao'], name='Satisfa√ß√£o', marker_color='#ff9800', mode='lines+markers'), secondary_y=True)
    fig.update_layout(title_text='Rela√ß√£o entre N√∫mero de Produtos, Rentabilidade e Satisfa√ß√£o', xaxis_title='N√∫mero de Produtos')
    fig.update_yaxes(title_text='Rentabilidade M√©dia (R$)', secondary_y=False)
    fig.update_yaxes(title_text='Satisfa√ß√£o M√©dia', secondary_y=True)
    st.plotly_chart(fig, use_container_width=True)

    canais_custo = df.groupby('canal_preferido')[['custo_atendimento_mensal', 'freq_contatos_mensais']].mean()
    canais_custo['custo_por_contato'] = canais_custo['custo_atendimento_mensal'] / canais_custo['freq_contatos_mensais']
    canais_caros = ['Ag√™ncia', 'Central Telef√¥nica']
    n_clientes_canais_caros = df[df['canal_preferido'].isin(canais_caros)].shape[0]
    custo_atual = df[df['canal_preferido'].isin(canais_caros)]['custo_atendimento_mensal'].sum()
    custo_medio_app = canais_custo.loc['App', 'custo_por_contato']
    freq_media_canais_caros = df[df['canal_preferido'].isin(canais_caros)]['freq_contatos_mensais'].mean()
    custo_estimado_digital = n_clientes_canais_caros * custo_medio_app * freq_media_canais_caros
    economia_potencial = custo_atual - custo_estimado_digital

    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Clientes em canais de alto custo", f"{n_clientes_canais_caros:,}")
    with col2:
        st.metric("Custo atual de atendimento", f"R$ {custo_atual:,.2f}")
    with col3:
        st.metric("Economia potencial mensal", f"R$ {economia_potencial:,.2f}")

    df_inativos = df[~df['cliente_ativo']]
    receita_potencial = df_inativos['receita_mensal'].sum()
    clientes_inativos = df_inativos.shape[0]
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Clientes inativos", f"{clientes_inativos:,} ({clientes_inativos/len(df):.1%} do total)")
    with col2:
        st.metric("Receita potencial mensal", f"R$ {receita_potencial:,.2f}")

    inativos_por_segmento = pd.crosstab(df['segmento'], df['cliente_ativo']).reset_index()
    inativos_por_segmento['taxa_inatividade'] = (1 - inativos_por_segmento[True] / (inativos_por_segmento[True] + inativos_por_segmento[False])) * 100
    inativos_por_segmento = inativos_por_segmento[['segmento', 'taxa_inatividade']]
    fig = px.bar(inativos_por_segmento, x='segmento', y='taxa_inatividade',
                 title='Taxa de Inatividade por Segmento',
                 labels={'segmento': 'Segmento', 'taxa_inatividade': 'Taxa de Inatividade (%)'},
                 color_discrete_sequence=['#f44336'])
    fig.update_layout(xaxis_title='Segmento', yaxis_title='Taxa de Inatividade (%)')
    st.plotly_chart(fig, use_container_width=True)

    st.markdown("""
    **Insights sobre Oportunidades:**
    
    1. **Cross-selling:** H√° uma correla√ß√£o positiva entre n√∫mero de produtos, rentabilidade e satisfa√ß√£o, sugerindo benef√≠cios em estrat√©gias de venda cruzada.
    
    2. **Migra√ß√£o de canais:** A migra√ß√£o de clientes para canais digitais pode gerar uma economia significativa nos custos de atendimento, mantendo ou at√© melhorando os n√≠veis de satisfa√ß√£o.
    
    3. **Reativa√ß√£o de clientes:** Existe uma oportunidade substancial de receita nammm reativa√ß√£o de clientes inativos, com foco especial no segmento Varejo que apresenta a maior taxa de inatividade.
    """)
st.markdown("---")

# ==============================================================================
# Se√ß√£o 5: Visualiza√ß√£o e Relat√≥rios
# ==============================================================================
st.header("5. Visualiza√ß√£o e Relat√≥rios")
st.markdown("""
Esta dashboard j√° constitui uma ferramenta de visualiza√ß√£o que permite analisar os dados e extrair insights de forma 
interativa. Em um ambiente corporativo, relat√≥rios peri√≥dicos podem ser gerados com base nos principais indicadores.
""")

st.subheader("Resumo dos Principais Indicadores")
col1, col2, col3 = st.columns(3)
with col1:
    st.markdown("#### Indicadores de Cliente")
    st.metric("Satisfa√ß√£o M√©dia", f"{df['satisfacao'].mean():.1f}/100")
    st.metric("Produtos por Cliente", f"{df['num_produtos'].mean():.2f}")
    st.metric("% Clientes Digitais", f"{sum(df['canal_preferido'].isin(['App', 'Internet Banking']))/len(df):.1%}")

with col2:
    st.markdown("#### Indicadores Financeiros")
    st.metric("Receita M√©dia por Cliente", f"R$ {df['receita_mensal'].mean():.2f}")
    st.metric("Custo M√©dio de Atendimento", f"R$ {df['custo_atendimento_mensal'].mean():.2f}")
    st.metric("Rentabilidade M√©dia", f"R$ {df['rentabilidade_mensal'].mean():.2f}")

with col3:
    st.markdown("#### Indicadores de Risco")
    risco_alto_pct = len(df_modelo[df_modelo['risco_churn'] == 'Alto']) / len(df) * 100
    st.metric("Clientes em Alto Risco", f"{risco_alto_pct:.1f}%")
    valor_risco = df_modelo[df_modelo['risco_churn'] == 'Alto']['rentabilidade_mensal'].sum()
    st.metric("Valor em Risco Mensal", f"R$ {valor_risco:.2f}")
    st.metric("Custo de Atendimento/Receita", f"{df['custo_atendimento_mensal'].sum()/df['receita_mensal'].sum():.1%}")

st.subheader("Dashboard Resumido")
col1, col2 = st.columns(2)
with col1:
    rent_total_por_segmento = df.groupby('segmento')['rentabilidade_mensal'].sum().reset_index()
    fig = px.pie(rent_total_por_segmento, names='segmento', values='rentabilidade_mensal',
                 title='Distribui√ß√£o de Rentabilidade por Segmento',
                 color_discrete_sequence=px.colors.qualitative.Safe)
    fig.update_traces(textinfo='percent+label')
    st.plotly_chart(fig, use_container_width=True)

with col2:
    fig = px.scatter(df_sample, x='satisfacao', y='rentabilidade_mensal', color='segmento',
                     title='Rela√ß√£o entre Satisfa√ß√£o e Rentabilidade',
                     labels={'satisfacao': 'Score de Satisfa√ß√£o', 'rentabilidade_mensal': 'Rentabilidade Mensal (R$)', 'segmento': 'Segmento'},
                     trendline='ols',
                     color_discrete_sequence=px.colors.qualitative.Safe)
    fig.update_layout(xaxis_title='Score de Satisfa√ß√£o', yaxis_title='Rentabilidade Mensal (R$)')
    st.plotly_chart(fig, use_container_width=True)
st.markdown("---")

# ==============================================================================
# Se√ß√£o 6: Tomada de Decis√£o
# ==============================================================================
st.header("6. Tomada de Decis√£o")
st.markdown("""
Com base nas an√°lises realizadas, identificamos oportunidades e estrat√©gias que podem melhorar a qualidade do atendimento 
e aumentar a rentabilidade do banco.
""")

st.subheader("Recomenda√ß√µes Estrat√©gicas")
recom_tabs = st.tabs(["Atendimento", "Vendas", "Reten√ß√£o", "Custo-Benef√≠cio", "Inova√ß√£o e Sustentabilidade"])

with recom_tabs[0]:
    st.markdown("""
    ### Estrat√©gias para Melhorar a Qualidade do Atendimento
    
    1. **Programa de Migra√ß√£o para Canais Digitais**
       - Desenvolver campanhas educativas para clientes de faixas et√°rias intermedi√°rias (31-60 anos)
       - Oferecer incentivos (isen√ß√£o de tarifas, cashback) para primeiras transa√ß√µes em canais digitais
       - Implementar tutoriais personalizados e suporte dedicado para migra√ß√£o
    
    2. **Otimiza√ß√£o do Atendimento em Ag√™ncias**
       - Reduzir tempo de espera atrav√©s de agendamentos pr√©vios para atendimentos presenciais
       - Treinar funcion√°rios para resolver problemas na primeira intera√ß√£o, reduzindo a necessidade de m√∫ltiplos contatos
       - Criar espa√ßos de autoatendimento assistido nas ag√™ncias para transi√ß√£o gradual aos canais digitais
    
    3. **Personaliza√ß√£o do Atendimento por Segmento**
       - Segmento Premium/Alta Renda/Private: Gerentes de relacionamento dedicados e canais priorit√°rios
       - Segmento Varejo com alto valor: Programa de upgrade com benef√≠cios diferenciados
       - Clientes Digitais: Ferramentas de autoatendimento avan√ßadas e chatbots inteligentes
    """)

with recom_tabs[1]:
    st.markdown("""
    ### Estrat√©gias para Aumento de Vendas e Rentabilidade
    
    1. **Programa de Cross-selling Baseado em Dados**
       - Desenvolver modelos de propens√£o √† compra para identificar os pr√≥ximos melhores produtos para cada cliente
       - Implementar jornadas de vendas personalizadas por segmento e perfil de uso
       - Foco em aumentar de 1-2 produtos para 3-4 produtos nos clientes de Varejo de alto valor
    
    2. **Precifica√ß√£o Din√¢mica Baseada em Valor**
       - Implementar modelos de precifica√ß√£o que considerem o valor total do relacionamento
       - Oferecer pacotes especiais para clientes com potencial de upgrade de segmento
       - Desenvolver programa de benef√≠cios progressivos conforme aumento do relacionamento
    
    3. **Estrat√©gia de Ativa√ß√£o de Clientes Inativos**
       - Campanha espec√≠fica para reativa√ß√£o dos clientes varejo inativos com ofertas personalizadas
       - Programa de "reconquista" de clientes de alto valor com benef√≠cios exclusivos
       - Implementar jornada de "boas-vindas" para clientes reativados com foco em engajamento
    """)

with recom_tabs[2]:
    st.markdown("""
    ### Estrat√©gias para Reten√ß√£o de Clientes
    
    1. **Programa de Fidelidade e Reconhecimento**
       - Implementar sistema de pontos por produtos, transa√ß√µes e tempo de relacionamento
       - Oferecer benef√≠cios tang√≠veis que aumentem conforme tempo de relacionamento
       - Reconhecer e premiar "momentos-chave" (anivers√°rio de conta, metas financeiras atingidas)
    
    2. **Interven√ß√£o Proativa para Clientes em Risco**
       - Criar alertas autom√°ticos no CRM para clientes com risco M√©dio-Alto e Alto, com fluxos de a√ß√£o predefinidos
       - Oferecer pacotes personalizados (ex.: redu√ß√£o de tarifas, benef√≠cios exclusivos) para clientes com alto risco
       - Monitorar m√©tricas de engajamento p√≥s-interven√ß√£o para avaliar efic√°cia das a√ß√µes
    
    3. **Programa de Educa√ß√£o Financeira**
       - Desenvolver conte√∫dos educativos (webinars, guias) para clientes Varejo, focando em gest√£o financeira e uso de produtos banc√°rios
       - Integrar educa√ß√£o financeira ao aplicativo m√≥vel com dicas personalizadas baseadas no comportamento do cliente
       - Clientes engajados com educa√ß√£o financeira tendem a aumentar o uso de produtos e a fidelidade
    
    4. **Monitoramento Cont√≠nuo de Satisfa√ß√£o**
       - Implementar pesquisas de satisfa√ß√£o p√≥s-intera√ß√£o em todos os canais, com perguntas r√°pidas e espec√≠ficas
       - Usar an√°lise de sentimento em feedbacks abertos para identificar pontos de dor recorrentes
       - Criar um painel em tempo real para gerentes acompanharem a satisfa√ß√£o por segmento e canal
    """)

with recom_tabs[3]:
    st.markdown("""
    ### Estrat√©gias para Otimiza√ß√£o de Custo-Benef√≠cio
    
    1. **Automatiza√ß√£o de Processos de Atendimento**
       - Expandir o uso de chatbots alimentados por IA para resolver at√© 70% das consultas de baixa complexidade no App e Internet Banking
       - Implementar sistemas de triagem autom√°tica para direcionar casos complexos a atendentes especializados
       - Reduzir custos operacionais mantendo a satisfa√ß√£o do cliente com respostas r√°pidas e precisas
    
    2. **Otimiza√ß√£o da Rede de Ag√™ncias**
       - Reavaliar a localiza√ß√£o e tamanho das ag√™ncias com base no fluxo de clientes e rentabilidade
       - Transformar ag√™ncias de baixo tr√°fego em pontos de autoatendimento com terminais digitais e suporte remoto
       - Reinvestir economias em melhorias nos canais digitais e treinamento de equipe
    
    3. **Gest√£o de Custos Baseada em Dados**
       - Criar um modelo preditivo para estimar o custo de atendimento por cliente com base em frequ√™ncia, canal e complexidade
       - Priorizar investimentos em canais com melhor rela√ß√£o custo-satisfa√ß√£o (App e Internet Banking)
       - Monitorar a rela√ß√£o custo/receita por segmento para alocar recursos de forma mais eficiente
    """)

with recom_tabs[4]:
    st.markdown("""
    ### Estrat√©gias para Inova√ß√£o e Sustentabilidade
    
    1. **Integra√ß√£o de Tecnologias Emergentes**
       - Implementar biometria e autentica√ß√£o por reconhecimento facial no App para aumentar seguran√ßa e conveni√™ncia
       - Explorar solu√ß√µes de blockchain para transa√ß√µes internacionais, reduzindo custos e aumentando a confian√ßa
       - Testar assistentes virtuais com IA generativa para oferecer consultoria financeira personalizada em tempo real
    
    2. **Produtos Sustent√°veis e Inclusivos**
       - Lan√ßar linhas de cr√©dito verde para projetos de energia renov√°vel e sustentabilidade, atraindo clientes conscientes
       - Criar contas digitais gratuitas para popula√ß√µes de baixa renda, promovendo inclus√£o financeira
       - Divulgar impacto social das iniciativas para fortalecer a marca e atrair clientes engajados
    
    3. **Parcerias Estrat√©gicas**
       - Firmar parcerias com fintechs para oferecer servi√ßos inovadores, como carteiras digitais e investimentos alternativos
       - Colaborar com empresas de tecnologia para integrar servi√ßos banc√°rios em plataformas de e-commerce
       - Estabelecer programas de recompensas com parceiros para aumentar o engajamento e a reten√ß√£o
    """)

st.subheader("Visualiza√ß√µes de Suporte √† Tomada de Decis√£o")
col1, col2 = st.columns(2)
with col1:
    custo_por_interacao = df.groupby('canal_preferido')[['custo_atendimento_mensal', 'freq_contatos_mensais']].sum()
    custo_por_interacao['Custo por Intera√ß√£o (R$)'] = custo_por_interacao['custo_atendimento_mensal'] / custo_por_interacao['freq_contatos_mensais']
    custo_por_interacao = custo_por_interacao[['Custo por Intera√ß√£o (R$)']].reset_index()
    fig = px.bar(custo_por_interacao, x='canal_preferido', y='Custo por Intera√ß√£o (R$)',
                 title='Custo M√©dio por Intera√ß√£o por Canal',
                 labels={'canal_preferido': 'Canal', 'Custo por Intera√ß√£o (R$)': 'Custo por Intera√ß√£o (R$)'},
                 color_discrete_sequence=['#ff5722'])
    fig.update_layout(xaxis_title='Canal', yaxis_title='Custo por Intera√ß√£o (R$)')
    st.plotly_chart(fig, use_container_width=True)

with col2:
    reativacao_por_segmento = df[~df['cliente_ativo']].groupby('segmento')['receita_mensal'].sum().reset_index()
    fig = px.bar(reativacao_por_segmento, x='segmento', y='receita_mensal',
                 title='Receita Potencial de Reativa√ß√£o por Segmento',
                 labels={'segmento': 'Segmento', 'receita_mensal': 'Receita Potencial (R$)'},
                 color_discrete_sequence=['#4caf50'])
    fig.update_layout(xaxis_title='Segmento', yaxis_title='Receita Potencial (R$)')
    st.plotly_chart(fig, use_container_width=True)

st.subheader("Proje√ß√£o de Impacto Financeiro")
receita_reativacao = receita_potencial * 0.3
receita_cross_selling = df[df['num_produtos'] <= 3]['rentabilidade_mensal'].sum() * 0.2
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("Economia com Migra√ß√£o Digital", f"R$ {economia_potencial:,.2f}/m√™s")
with col2:
    st.metric("Receita com Reativa√ß√£o", f"R$ {receita_reativacao:,.2f}/m√™s")
with col3:
    st.metric("Receita com Cross-selling", f"R$ {receita_cross_selling:,.2f}/m√™s")
st.markdown("---")

# ==============================================================================
# Resumo Executivo
# ==============================================================================
st.header("Resumo Executivo")
st.markdown("""
Este projeto desenvolveu uma an√°lise completa de dados banc√°rios simulados, utilizando Python, Pandas, NumPy, Plotly e Streamlit, para gerar insights acion√°veis que melhoram a qualidade do atendimento e aumentam a lucratividade de uma institui√ß√£o financeira. A an√°lise abrangeu:

- **Coleta e Limpeza**: Simula√ß√£o de 10.000 registros com dados realistas, tratados para garantir consist√™ncia.
- **Explora√ß√£o (EDA)**: Identifica√ß√£o de padr√µes em segmentos, canais, satisfa√ß√£o e rentabilidade.
- **An√°lise Avan√ßada**: Segmenta√ß√£o RFV, modelos preditivos de churn e an√°lise de oportunidades de cross-selling e migra√ß√£o de canais.
- **Visualiza√ß√£o**: Dashboards interativos com m√©tricas-chave para facilitar a interpreta√ß√£o.
- **Tomada de Decis√£o**: Recomenda√ß√µes estrat√©gicas para:
  - **Melhorar o Atendimento**: Migra√ß√£o para canais digitais, otimiza√ß√£o de ag√™ncias e personaliza√ß√£o por segmento.
  - **Aumentar a Lucratividade**: Cross-selling, reativa√ß√£o de clientes inativos e precifica√ß√£o din√¢mica.
  - **Reduzir Riscos**: Interven√ß√µes proativas contra churn e programas de fidelidade.
  - **Inova√ß√£o**: Integra√ß√£o de IA, produtos sustent√°veis e parcerias com fintechs.

**Impacto Projetado**:
- Economia de R$ {economia_potencial:,.2f}/m√™s com migra√ß√£o para canais digitais.
- Receita adicional de R$ {receita_reativacao:,.2f}/m√™s com reativa√ß√£o de clientes.
- Aumento de R$ {receita_cross_selling:,.2f}/m√™s com estrat√©gias de cross-selling.

Este projeto demonstra a aplica√ß√£o pr√°tica de an√°lise
             de dados para resolver problemas de neg√≥cios, com foco em resultados mensur√°veis e estrat√©gias inovadoras.
""".format(economia_potencial=economia_potencial, receita_reativacao=receita_reativacao, receita_cross_selling=receita_cross_selling))